---
title: "Forecast scores"
format: html
editor: visual
---

## Load data

```{r}
#devtools::install_github("eco4cast/score4cast")
library(score4cast)
library(tidyverse)
source("../R/score_all_forecasts.R")
#Metrics

#Forecasts
outputs <- list.files("../outputs", full.names = T)
outputs <- outputs[file.info(outputs)$size > 29] #Filter out empty files
forecasts <- read_csv(outputs, show_col_types = F)
  
#L1
observations <- read_csv("../L1.csv", show_col_types = F)
```

## Score forecasts

```{r}
#Re-score if needed, otherwise load saved scores
#scores <- score_all_forecasts(forecasts, observations)
scores <- read_csv("scores.csv", show_col_types = F)

scores_format <- scores %>%
  filter(horizon > 0) %>%
  mutate(horizon = horizon/60/60/24) %>%
  mutate(temp = sub(".+_e*", "", site_id),
         temp = ifelse(temp == "amb", 0, temp),
         temp = as.numeric(temp),
         year = year(datetime))
```

## Generate plots

### By horizon and site

```{r}
scores_format %>%
  filter(!model_id == "RW",#RW is quite bad
         !year == 2021) %>% 
  ggplot(aes(x = horizon, 
             y = crps,
             color = temp,
             group = site_id)) +
  geom_smooth() +
  facet_grid(rows = vars(model_id), cols = vars(year)) +
  xlab("Forecast horizon (days)") +
  scale_color_viridis_c()

scores_format %>%
  group_by(horizon, site_id, model_id, temp, year) %>%
  summarize(rmse = Metrics::rmse(observation, mean)) %>%
  ggplot(aes(x = horizon, 
             y = rmse,
             color = temp,
             group = site_id)) +
  geom_line() +
  facet_grid(rows = vars(model_id), cols = vars(year))+
  xlab("Forecast horizon (days)")+
  scale_color_viridis_c()

p <- scores_format %>%
  filter(!year == 2021,
         !model_id == "RW") %>% #same as persistence for RMSE
  group_by(horizon, site_id, model_id, temp, year) %>%
  summarize(rmse = Metrics::rmse(observation, mean)) %>%
  ggplot(aes(x = horizon, 
             y = rmse,
             color = model_id)) +
  geom_line() +
  facet_grid(cols = vars(site_id), rows = vars(year))+
  xlab("Forecast horizon (days)")+
  scale_color_viridis_d()
plotly::ggplotly(p)

scores_format %>%
  mutate(bias = mean - observation) %>%
  ggplot(aes(x = horizon, 
             y = bias,
             color = temp,
             group = site_id)) +
  geom_smooth() +
  xlab("Forecast horizon (days)")+
  facet_grid(rows = vars(model_id), cols = vars(year))+
  scale_color_viridis_c()

```

### Horizon only

```{r}
p <- scores_format %>%
  group_by(horizon, model_id, year) %>%
  summarize(rmse = Metrics::rmse(observation, mean)) %>%
  ggplot(aes(x = horizon, 
             y = rmse, color = model_id)) +
  geom_line() +
  xlab("Forecast horizon (days)")+
  scale_color_viridis_d()+
  facet_wrap(~year)
plotly::ggplotly(p)

scores_format %>%
  ggplot(aes(x = horizon, 
             y = crps, color = model_id)) +
  geom_smooth(se = F) +
  xlab("Forecast horizon (days)")+
  scale_color_viridis_d()+
  facet_wrap(~year)
```

Freya's rank plot

```{r}
scores_format %>%
  filter(year == 2023,
         !model_id == "RW") %>% #same as persistence for RMSE
  mutate(error = abs(observation - mean)) %>%
  group_by(horizon, site_id, reference_datetime) %>%
  arrange(error) %>%
  mutate(rank = which(model_id == model_id)) %>%
  group_by(horizon, site_id, model_id) %>%
  mutate(n = n()) %>%
  group_by(horizon, site_id, model_id, rank) %>%
  summarize(pct = n()/unique(n)) %>%
  ggplot(aes(x = horizon, 
             y = pct,
             fill = as.factor(rank))) +
  geom_area() +
  facet_grid(cols = vars(site_id), rows = vars(model_id))+
  xlab("Forecast horizon (days)")+
  scale_fill_brewer(palette = "RdBu")

site_cols = c(RColorBrewer::brewer.pal(n = 11, name = 'RdBu'), "black")
scores_format %>%
  filter(year == 2023,
         horizon == 35,
         !model_id == "RW") %>% #same as persistence for RMSE
  mutate(error = abs(observation - mean)) %>%
  group_by(model_id, reference_datetime) %>%
  arrange(error) %>%
  mutate(rank = which(site_id == site_id)) %>%
  group_by(site_id, model_id, horizon) %>%
  mutate(n = n()) %>%
  group_by(horizon, site_id, model_id, rank) %>%
  summarize(pct = n()/unique(n)) %>%
  ggplot(aes(y = model_id, 
             x = pct,
             fill = as.factor(rank))) +
  geom_col() +
  facet_grid(cols = vars(site_id))+
  scale_fill_manual(values = site_cols)
```

### Over time

```{r}
scores_format %>%
  mutate(season = ifelse(month(datetime) %in% c(6, 7, 8), "Summer",
                         ifelse(month(datetime) %in% c(12, 1, 2), "Winter",
                                ifelse(month(datetime) %in% c(3, 4, 5), "Spring",
                                             ifelse(month(datetime) %in% c(9, 10, 11),
                                                    "Autumn", NA))))) %>%
  group_by(horizon, site_id, model_id, year, season) %>%
  summarize(rmse = Metrics::rmse(observation, mean)) %>%
  ggplot(aes(x = horizon, 
             y = rmse,
             color = model_id)) +
  geom_smooth() +
  xlab("Forecast horizon (days)") +
  facet_grid(rows = vars(year), cols = vars(season))+
  scale_color_viridis_d()

scores_format %>%
  filter(year == 2023) %>%
  mutate(season = ifelse(month(datetime) %in% c(6, 7, 8), "Summer",
                         ifelse(month(datetime) %in% c(12, 1, 2), "Winter",
                                ifelse(month(datetime) %in% c(3, 4, 5), "Spring",
                                             ifelse(month(datetime) %in% c(9, 10, 11),
                                                    "Autumn", NA))))) %>%
  group_by(horizon, site_id, model_id, year, season) %>%
  summarize(rmse = Metrics::rmse(observation, mean)) %>%
  ggplot(aes(x = horizon, 
             y = rmse,
             color = model_id)) +
  geom_smooth() +
  xlab("Forecast horizon (days)") +
  facet_grid(~season, scales = "free")+
  scale_color_viridis_d()

scores_format %>%
  filter(year == 2023) %>%
  mutate(season = ifelse(month(datetime) %in% c(6, 7, 8), "Summer",
                         ifelse(month(datetime) %in% c(12, 1, 2), "Winter",
                                ifelse(month(datetime) %in% c(3, 4, 5), "Spring",
                                             ifelse(month(datetime) %in% c(9, 10, 11),
                                                    "Autumn", NA))))) %>%
  group_by(horizon, site_id, model_id, year, season) %>%
  summarize(bias = mean(mean - observation)) %>%
  ggplot(aes(x = horizon, 
             y = bias,
             color = model_id)) +
  geom_smooth() +
  xlab("Forecast horizon (days)") +
  facet_grid(~season, scales = "free")+
  scale_color_viridis_d()

scores_format %>%
  filter(crps < 300,
         horizon == 7) %>%
  ggplot(aes(x = reference_datetime, 
             y = crps,
             color = temp,
             group = site_id)) +
  geom_line() +
  facet_wrap(~model_id) +
  ylab("CRPS of 7-day forecast") +
  xlab("Forecast date")+
  scale_color_viridis_c()

scores_format %>%
  mutate(bias = mean - observation) %>%
  filter(horizon == 7) %>%
  ggplot(aes(x = datetime, 
             y = bias,
             color = temp,
             group = site_id)) +
  geom_line() +
  facet_wrap(~model_id) +
  ylab("Bias of 7-day forecast") +
  xlab("Forecast date")+
  scale_color_viridis_c()

```

### Raw forecast output

```{r}
jpeg("../figures/7-day forecasts.png", res = 300, width = 8, height = 5, units = "in")
seven <- scores_format %>%
  filter(horizon == 7) %>%
  ggplot(aes(x = datetime, 
             y = mean)) +
  geom_point(aes(x = datetime, y = observation), data = observations, color = "black")+
  geom_ribbon(aes(ymin = quantile90, ymax = quantile10, fill = model_id), alpha = 0.4) +
  geom_line(aes(color = model_id)) +
  facet_wrap(~site_id) +
  xlab("Forecast date")+
  coord_cartesian(ylim=c(min(observations$observation), max(observations$observation)))
seven
dev.off()

jpeg("../figures/30-day forecasts.png", res = 300, width = 8, height = 5, units = "in")
thirty <- scores_format %>%
  filter(horizon == 30) %>%
  ggplot(aes(x = datetime, 
             y = mean)) +
  geom_point(aes(x = datetime, y = observation), data = observations, color = "black")+
  geom_ribbon(aes(ymin = quantile90, ymax = quantile10, fill = model_id), alpha = 0.4) +
  geom_line(aes(color = model_id)) +
  facet_wrap(~site_id) +
  xlab("Forecast date")+
  coord_cartesian(ylim=c(min(observations$observation), max(observations$observation)))
thirty
dev.off()

seven
thirty
```
