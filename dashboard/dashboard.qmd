---
title: "GENX CH4cast Dashboard"
title-block-banner: true
format: 
  html
server: shiny
---

```{r, message=FALSE, warning=FALSE}
#| context: setup

library(tidyverse)
library(shiny)
#Optional: download new data
source(here::here("R","generate_target.R"))
#target <- generate_target()

models <- list.files(here::here("models"))

file_options <- data.frame(files = list.files(here::here("Raw_data", "dropbox_downloads")))
options_ordered <- file_options %>%
  mutate(Date_num = str_extract(files, "\\d{8}"),
         Date_date = as.Date(Date_num, format = "%Y%m%d"),
         Date_date = ifelse(is.na(Date_date), Sys.Date(), Date_date)) %>%
  arrange(desc(Date_date))
```

## Forecast

```{r}
#| panel: sidebar
selectInput('model', 'Forecast model', models, selected = models[[1]])
sliderInput('hist_data', 'Days of historical data to plot', 0,1000, value = 35)
dateInput('forecast_date', 'Forecast date', 
          value = Sys.Date(), 
          min = "2022-01-01",
          max = Sys.Date())
```

```{r}
#| panel: fill
plotOutput('plot1')
```

## Raw data

```{r}
#| panel: input
h3("Which raw data file to plot")
selectInput('raw_data_file', 'Choose file name:', options_ordered$files, selected = "current.dat", width = "100%")
```

```{r}
#| panel: fill
plotOutput('plot2')
```

```{r}
#| context: server
source(here::here("R","generate_target.R"))
source(here::here("R", "generate_tg_forecast.R"))
source(here::here("R", "plot_shiny_forecast.R"))
source(here::here("R", "plot_raw_data.R"))

#Code for plots
output$plot1 <- renderPlot({
  plot_shiny_forecast(input$forecast_date, input$model, input$hist_data)
  })
output$plot2 <- renderPlot({
  plot_raw_data(input$raw_data_file)
  })
```

